name: Deploy to AWS

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: fastapi-app

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.PROJECT_NAME }}-${{ github.event.inputs.environment || 'production' }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image-uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Scan image for vulnerabilities
        run: |
          aws ecr start-image-scan \
            --repository-name ${{ env.PROJECT_NAME }}-${{ github.event.inputs.environment || 'production' }} \
            --image-id imageTag=${{ github.sha }} \
            --region ${{ env.AWS_REGION }}

  deploy-terraform:
    name: Deploy with Terraform
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        working-directory: infra/aws/terraform
        run: terraform init

      - name: Terraform Format Check
        working-directory: infra/aws/terraform
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: infra/aws/terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: infra/aws/terraform
        env:
          TF_VAR_container_image: ${{ needs.build-and-push.outputs.image-uri }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_environment: ${{ github.event.inputs.environment || 'production' }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
        working-directory: infra/aws/terraform
        env:
          TF_VAR_container_image: ${{ needs.build-and-push.outputs.image-uri }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_environment: ${{ github.event.inputs.environment || 'production' }}
        run: terraform apply -auto-approve tfplan

  deploy-cloudformation:
    name: Deploy with CloudFormation
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'workflow_dispatch'
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy CloudFormation stack
        env:
          STACK_NAME: ${{ env.PROJECT_NAME }}-${{ github.event.inputs.environment }}
        run: |
          aws cloudformation deploy \
            --template-file infra/aws/cloudformation/main.yaml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              ProjectName=${{ env.PROJECT_NAME }} \
              Environment=${{ github.event.inputs.environment }} \
              ContainerImage=${{ needs.build-and-push.outputs.image-uri }} \
              DBPassword=${{ secrets.DB_PASSWORD }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

  run-migrations:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-terraform]
    if: always() && (needs.deploy-terraform.result == 'success')
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run Alembic migrations
        run: |
          CLUSTER_NAME="${{ env.PROJECT_NAME }}-${{ github.event.inputs.environment || 'production' }}-cluster"
          SERVICE_NAME="${{ env.PROJECT_NAME }}-${{ github.event.inputs.environment || 'production' }}-service"

          # Get task ARN
          TASK_ARN=$(aws ecs list-tasks \
            --cluster $CLUSTER_NAME \
            --service-name $SERVICE_NAME \
            --query 'taskArns[0]' \
            --output text)

          # Run migration
          aws ecs execute-command \
            --cluster $CLUSTER_NAME \
            --task $TASK_ARN \
            --container ${{ env.PROJECT_NAME }}-container \
            --interactive \
            --command "alembic upgrade head"

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-terraform, run-migrations]
    if: always() && (needs.deploy-terraform.result == 'success')
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Load Balancer URL
        id: get-url
        run: |
          cd infra/aws/terraform
          terraform init
          LB_URL=$(terraform output -raw load_balancer_url)
          echo "lb-url=$LB_URL" >> $GITHUB_OUTPUT

      - name: Wait for service to be healthy
        run: sleep 60

      - name: Test health endpoint
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.get-url.outputs.lb-url }}/healthz)
          if [ $response -eq 200 ]; then
            echo "Health check passed!"
          else
            echo "Health check failed with status code: $response"
            exit 1
          fi

      - name: Test API documentation
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.get-url.outputs.lb-url }}/docs)
          if [ $response -eq 200 ]; then
            echo "API documentation is accessible!"
          else
            echo "API documentation check failed with status code: $response"
            exit 1
          fi
